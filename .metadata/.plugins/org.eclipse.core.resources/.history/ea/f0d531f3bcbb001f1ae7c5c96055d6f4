package dao;

import model.Hotel;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Classe DAO pour gérer les hôtels dans la base de données.
 */
public class HotelDAO {

    private Connection connection;

    // Constructeur qui initialise la connexion à la base de données
    public HotelDAO(Connection connection) {
        this.connection = connection;
    }

    // Méthode pour ajouter un hôtel
    public void addHotel(Hotel hotel) throws SQLException {
        String query = "INSERT INTO hotels (name, address, city, phone) VALUES (?, ?, ?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, hotel.getName());
            statement.setString(2, hotel.getAddress());
            statement.setString(3, hotel.getCity());
            statement.setString(4, hotel.getPhone());
            statement.executeUpdate();
        }
    }

    // Méthode pour récupérer un hôtel par son ID
    public Hotel getHotelById(int id) throws SQLException {
        String query = "SELECT * FROM hotels WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, id);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return new Hotel(
                    resultSet.getInt("id"),
                    resultSet.getString("name"),
                    resultSet.getString("address"),
                    resultSet.getString("city"),
                    resultSet.getString("phone")
                );
            } else {
                return null; // Hôtel non trouvé
            }
        }
    }

    // Méthode pour récupérer tous les hôtels
    public List<Hotel> getAllHotels() throws SQLException {
        List<Hotel> hotels = new ArrayList<>();
        String query = "SELECT * FROM hotels";
        try (Statement statement = connection.createStatement()) {
            ResultSet resultSet = statement.executeQuery(query);
            while (resultSet.next()) {
                Hotel hotel = new Hotel(
                    resultSet.getInt("id"),
                    resultSet.getString("name"),
                    resultSet.getString("address"),
                    resultSet.getString("city"),
                    resultSet.getString("phone")
                );
                hotels.add(hotel);
            }
        }
        return hotels;
    }

    // Méthode pour mettre à jour un hôtel
    public void updateHotel(Hotel hotel) throws SQLException {
        String query = "UPDATE hotels SET name = ?, address = ?, city = ?, phone = ? WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, hotel.getName());
            statement.setString(2, hotel.getAddress());
            statement.setString(3, hotel.getCity());
            statement.setString(4, hotel.getPhone());
            statement.setInt(5, hotel.getId());
            statement.executeUpdate();
        }
    }

    // Méthode pour supprimer un hôtel
    public void deleteHotel(int id) throws SQLException {
        String query = "DELETE FROM hotels WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, id);
            statement.executeUpdate();
        }
    }
}
