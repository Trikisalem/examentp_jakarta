/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.97
 * Generated at: 2024-12-18 00:57:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.text.SimpleDateFormat;

public final class reservation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    // Connexion à la base de données
    private Connection getConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            return DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/hotel_management", // Base de données
                "root", // Utilisateur
                "triki" // Mot de passe
            );
        } catch (ClassNotFoundException e) {
            throw new SQLException("Driver JDBC MySQL non trouvé", e);
        }
    }

    // Récupérer les types de chambres disponibles
    private List<String> getRoomTypes() throws SQLException {
        List<String> roomTypes = new ArrayList<>();
        try (Connection conn = getConnection()) {
            String query = "SELECT label FROM RoomType";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roomTypes.add(rs.getString("label"));
            }
        }
        return roomTypes;
    }

    // Calculer le total du séjour en fonction des dates et du type de chambre
    private double calculateTotal(String roomType, String checkIn, String checkOut) throws SQLException {
        try (Connection conn = getConnection()) {
            String query = "SELECT price FROM RoomType WHERE label = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, roomType);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                double pricePerNight = rs.getDouble("price");
                java.sql.Date checkInDate = java.sql.Date.valueOf(checkIn);
                java.sql.Date checkOutDate = java.sql.Date.valueOf(checkOut);
                long diff = checkOutDate.getTime() - checkInDate.getTime();
                long days = diff / (1000 * 60 * 60 * 24);
                return days * pricePerNight;
            }
        }
        return 0;
    }

    // Créer une réservation
    private boolean makeReservation(String firstName, String lastName, String email, String phone,
                                    String checkIn, String checkOut, String roomType) {
        try {
            java.sql.Date checkInDate = java.sql.Date.valueOf(checkIn);
            java.sql.Date checkOutDate = java.sql.Date.valueOf(checkOut);

            try (Connection conn = getConnection()) {
                String query = "INSERT INTO Reservation " +
                               "(guest_first_name, guest_last_name, guest_email, guest_phone, " +
                               "check_in_date, check_out_date, room_type_id) " +
                               "VALUES (?, ?, ?, ?, ?, ?, (SELECT id FROM RoomType WHERE label = ?))";
                PreparedStatement pstmt = conn.prepareStatement(query);
                pstmt.setString(1, firstName);
                pstmt.setString(2, lastName);
                pstmt.setString(3, email);
                pstmt.setString(4, phone);
                pstmt.setDate(5, checkInDate);
                pstmt.setDate(6, checkOutDate);
                pstmt.setString(7, roomType);
                int rowsAffected = pstmt.executeUpdate();
                return rowsAffected > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/user/Desktop/backend/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/hotel/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153377882000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1734448720554L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Les JSPs ne permettent que GET, POST ou HEAD. Jasper permet aussi OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    // Récupération des paramètres du formulaire
    String firstName = request.getParameter("first_name");
    String lastName = request.getParameter("last_name");
    String email = request.getParameter("email");
    String phone = request.getParameter("phone");
    String checkIn = request.getParameter("check_in");
    String checkOut = request.getParameter("check_out");
    String roomType = request.getParameter("room_type");

    boolean validReservation = false;
    String errorMessage = "";
    double totalAmount = 0;

    if (firstName != null && lastName != null && email != null && phone != null &&
        checkIn != null && checkOut != null && roomType != null) {
        try {
            totalAmount = calculateTotal(roomType, checkIn, checkOut);
            if (makeReservation(firstName, lastName, email, phone, checkIn, checkOut, roomType)) {
                validReservation = true;
            } else {
                errorMessage = "Une erreur est survenue lors de la réservation.";
            }
        } catch (IllegalArgumentException e) {
            errorMessage = "Veuillez vérifier les dates. La date de départ doit être ultérieure à la date d'arrivée.";
        } catch (SQLException e) {
            errorMessage = "Erreur dans le traitement de la réservation.";
        }
    }

    List<String> roomTypes = new ArrayList<>();
    try {
        roomTypes = getRoomTypes();
    } catch (SQLException e) {
        errorMessage = "Erreur lors de la récupération des types de chambres.";
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"fr\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Réservation d'une chambre</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n");
      out.write("            background-color: #f4f4f9; /* Gris clair */\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            max-width: 800px;\r\n");
      out.write("            margin: 50px auto;\r\n");
      out.write("            background-color: white;\r\n");
      out.write("            padding: 30px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h2 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: #333;\r\n");
      out.write("            font-size: 28px;\r\n");
      out.write("            margin-bottom: 30px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .form-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        label {\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            color: #555;\r\n");
      out.write("            margin-bottom: 8px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        input, select, button {\r\n");
      out.write("            padding: 12px;\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            background-color: #fafafa;\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        input:focus, select:focus {\r\n");
      out.write("            border-color: #2196F3;\r\n");
      out.write("            outline: none;\r\n");
      out.write("            box-shadow: 0 0 5px rgba(33, 150, 243, 0.4);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button {\r\n");
      out.write("            background-color: #2196F3;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button:hover {\r\n");
      out.write("            background-color: #1976D2;\r\n");
      out.write("            transform: translateY(-2px);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button:active {\r\n");
      out.write("            transform: translateY(1px);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .error-message {\r\n");
      out.write("            background-color: #f44336;\r\n");
      out.write("            color: white;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .success-message {\r\n");
      out.write("            background-color: #4CAF50;\r\n");
      out.write("            color: white;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .form-footer {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script>\r\n");
      out.write("        function showAlert(total, firstName, lastName, roomType, checkIn, checkOut) {\r\n");
      out.write("            alert(`Réservation confirmée !\\n` +\r\n");
      out.write("                  `Client : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${firstName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${lastName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\n` +\r\n");
      out.write("                  `Type de chambre : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\n` +\r\n");
      out.write("                  `Date d'arrivée : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${checkIn}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\n` +\r\n");
      out.write("                  `Date de départ : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${checkOut}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\n` +\r\n");
      out.write("                  `Total à payer : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${total.toFixed(2)}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" TND`);\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h2>Réservation d'une chambre</h2>\r\n");
      out.write("\r\n");
      out.write("        ");
 if (!errorMessage.isEmpty()) { 
      out.write("\r\n");
      out.write("            <div class=\"error-message\">");
      out.print( errorMessage );
      out.write("</div>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");
 if (validReservation) { 
      out.write("\r\n");
      out.write("            <div class=\"success-message\">Votre réservation a été confirmée !</div>\r\n");
      out.write("           \r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <form action=\"reservation.jsp\" method=\"post\" class=\"form-container\">\r\n");
      out.write("            <label for=\"first_name\">Prénom :</label>\r\n");
      out.write("            <input type=\"text\" id=\"first_name\" name=\"first_name\" required>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"last_name\">Nom :</label>\r\n");
      out.write("            <input type=\"text\" id=\"last_name\" name=\"last_name\" required>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"email\">Email :</label>\r\n");
      out.write("            <input type=\"email\" id=\"email\" name=\"email\" required>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"phone\">Téléphone :</label>\r\n");
      out.write("            <input type=\"text\" id=\"phone\" name=\"phone\" required>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"room_type\">Type de chambre :</label>\r\n");
      out.write("            <select id=\"room_type\" name=\"room_type\" required>\r\n");
      out.write("                <option value=\"\">Sélectionnez un type de chambre</option>\r\n");
      out.write("                ");
 for (String type : roomTypes) { 
      out.write("\r\n");
      out.write("                    <option value=\"");
      out.print( type );
      out.write('"');
      out.write('>');
      out.print( type );
      out.write("</option>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"check_in\">Date d'arrivée :</label>\r\n");
      out.write("            <input type=\"date\" id=\"check_in\" name=\"check_in\" required>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"check_out\">Date de départ :</label>\r\n");
      out.write("            <input type=\"date\" id=\"check_out\" name=\"check_out\" required>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"form-footer\">\r\n");
      out.write("                <button type=\"submit\" style=\"width: 100%;\">Réserver maintenant</button>\r\n");
      out.write("                <button type=\"button\" style=\"width: 100%;\" onclick=\"window.history.back();\">Retour</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
