/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.97
 * Generated at: 2024-12-17 23:49:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.List;
import java.util.ArrayList;
import model.Hotel;

public final class searchHotels_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/user/Desktop/backend/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/hotel/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153377882000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1734448720554L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model.Hotel");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Les JSPs ne permettent que GET, POST ou HEAD. Jasper permet aussi OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Search Hotels</title>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container mt-5\">\r\n");
      out.write("        <h2 class=\"text-center text-primary mb-4\">Search Hotels</h2>\r\n");
      out.write("\r\n");
      out.write("        <!-- Formulaire de recherche -->\r\n");
      out.write("        <form action=\"searchHotels.jsp\" method=\"get\" class=\"mb-4\">\r\n");
      out.write("            <div class=\"row\">\r\n");
      out.write("                <div class=\"col-md-4\">\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" name=\"city\" placeholder=\"City\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-4\">\r\n");
      out.write("                    <input type=\"number\" class=\"form-control\" name=\"stars\" placeholder=\"Stars\" min=\"1\" max=\"5\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col-md-4\">\r\n");
      out.write("                    <button type=\"submit\" class=\"btn btn-primary w-100\">Search</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("\r\n");
      out.write("        <!-- Logique JSP pour la recherche d'hôtels -->\r\n");
      out.write("        ");

            // Récupération des paramètres de la requête
            String city = request.getParameter("city");
            String starsStr = request.getParameter("stars");

            int stars = 0;
            if (starsStr != null && !starsStr.isEmpty()) {
                try {
                    stars = Integer.parseInt(starsStr);
                } catch (NumberFormatException e) {
                    stars = 0; // Si la conversion échoue, utiliser la valeur par défaut
                }
            }

            List<Hotel> hotels = new ArrayList<>();
            Connection conn = null;
            PreparedStatement ps = null;
            ResultSet rs = null;

            try {
                // Charger le driver MySQL
                Class.forName("com.mysql.cj.jdbc.Driver");

                // Connexion à la base de données
                String dbUrl = "jdbc:mysql://localhost:3306/hotel_management"; // Changez le nom de votre base de données
                String dbUsername = "root"; // Votre nom d'utilisateur MySQL
                String dbPassword = "triki"; // Votre mot de passe MySQL

                conn = DriverManager.getConnection(dbUrl, dbUsername, dbPassword);

                // Préparer la requête de recherche d'hôtels
                String sql = "SELECT * FROM hotel WHERE city LIKE ? AND stars >= ?";
                ps = conn.prepareStatement(sql);
                ps.setString(1, "%" + (city != null ? city : "") + "%"); // Recherche insensible à la casse pour la ville
                ps.setInt(2, stars);

                rs = ps.executeQuery();

                // Ajouter les hôtels récupérés à la liste
                while (rs.next()) {
                    Hotel hotel = new Hotel(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("city"),
                        rs.getInt("stars"),
                        rs.getString("description"),
                        rs.getString("image"),
                        rs.getInt("agentId") // Nous stockons l'agentId, mais il ne sera pas affiché
                    );
                    hotels.add(hotel);
                }

            } catch (Exception e) {
                // Afficher l'exception pour le débogage
                e.printStackTrace();
                out.println("<p>Error occurred: " + e.getMessage() + "</p>");
            } finally {
                // Fermer les ressources de base de données
                try {
                    if (rs != null) rs.close();
                    if (ps != null) ps.close();
                    if (conn != null) conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <!-- Vérification de la session pour déterminer si l'utilisateur est connecté -->\r\n");
      out.write("        ");

            // Vérification de la session pour déterminer si l'utilisateur est connecté
            Boolean isVisitor = (Boolean) session.getAttribute("isVisitor");

            if (isVisitor != null && isVisitor) {
                out.println("<p>You are a visitor. Hotel data will not be displayed.</p>");
            } else {
        
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        <!-- Affichage des résultats si des hôtels sont trouvés -->\r\n");
      out.write("        ");

            if (hotels.isEmpty()) {
                out.println("<p>No hotels found.</p>");
            } else {
        
      out.write("\r\n");
      out.write("            <table class=\"table table-bordered mt-4\">\r\n");
      out.write("                <thead class=\"table-light\">\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <th>Hotel Name</th>\r\n");
      out.write("                        <th>City</th>\r\n");
      out.write("                        <th>Stars</th>\r\n");
      out.write("                        <th>Description</th>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                </thead>\r\n");
      out.write("                <tbody>\r\n");
      out.write("                    ");
 
                        // Boucle sur les hôtels et affichage des données
                        for (Hotel hotel : hotels) {
                    
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td>");
      out.print( hotel.getName() );
      out.write("</td>\r\n");
      out.write("                            <td>");
      out.print( hotel.getCity() );
      out.write("</td>\r\n");
      out.write("                            <td>");
      out.print( hotel.getStars() );
      out.write("</td>\r\n");
      out.write("                            <td>");
      out.print( hotel.getDescription() );
      out.write("</td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                    ");
 
                        }
                    
      out.write("\r\n");
      out.write("                </tbody>\r\n");
      out.write("            </table>\r\n");
      out.write("        ");
 
            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Inclusion des scripts JavaScript nécessaires -->\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
